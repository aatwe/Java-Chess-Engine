What we done? legalMoves for knight


What we dont know?
	logalMoves.add(new Move());



Objective: Create Move class
Note: 
	In BoardUtils
	we have 4 boolean arrays[]
		FIRST_COLUMN
		SECOND_COLUMN
		THIRD_COLUMN
		FOURTH_COLUMN

a) What size of each array? 64
for FIRST_COLUMN : only first collumn will be turned on (1)
How to use them in logic now? currently they all are set to null

m1) write separate method for each

m2) common method

 initColumn()	//input arg : column no.

m3)add few more constants
	
	public static final int NUM_TILES = 64
	ublic static final int NUM_TILES_PER_ROW = 64

//wherever 64 change to NUM_TILES



b) move class		//What will a move remmember? from where to where moved, what piece moved		//declare abstract,why?
	constructor
		track board, movedPiece

	Q) we had 2 types of moves
		Normal move	(Non attacking)
		Attacking move

	create 2 subclasses : MajorMove					//make MajorMove, AttackMove, and its constructors --> all public
						call constructor
					AttackMove
						call constructor

	How will AttackMove be different from Majormove?
	b.1) IN AttackMove also have to memorize what piece was attacked
		//initialize in constructor of AttackMove class

	Note: make Move constructor private, why?
	

	b.2) after all this done, use Move class in Knight Class
		pass board, this (piece Knight), candidateDestinationCoordinate (destination Location)


Looks Like:
		  final Tile candidateDestinationTile = board.getTile(candidateDestinationCoordinate);
		   if(!candidateDestinationTile.isTileOCcupied()) {
				legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));
			} else {
				final Piece pieceAtDestination = candidateDestinationTile.getPiece();
				final Alliance pieceAlliance = pieceAtDestination.getPieceAlliance();

				if(this.pieceAlliance != pieceAlliance) {
					legalMoves.add(new AttackMove(board, this, candidateDestinationCoordinate, pieceAtDestination));
			  }
		    }
	b.3) Also declare overriden method of knight class->  method arguments as final
		public Collection<Move> calculateLegalMoves(final Board board) {



What what done till now?
a) added initColumn() method  , allows o initilize and keep track off particular column on board
	where is it used? in KNight class in ColumnExclusion

What is remaining? 
	How to execute the move


-----------------------------------------------------------------------------
Code:

public abstract class Move{
	
	final Board board;	
	final Piece movedPiece;
	final int destinationCoordinate;

	private Move(final Board board, final Piece movedPiece, final int destinationCoordinate) {
		this.board = board;	
		this.movedPiece = movedPiece;	
		this.destinationCoordiante = destinationCoordinate;
	}

	public static final class MajorMove extends Move {

		public MajorMove(finalBoard board,final Piece movedPiece,int destinationCoordinate){
			super(board, movedPiece, destinationCoordinate);		
	}

	public static final class AttackMove extends Move {
		
		final Piece attackedPiece;

		public AttackMove(finalBoard board,
				Piece movedPiece,
				final int destinationCoordinate, final Piece attackedPiece){
			super(board, movedPiece, destinationCoordinate);
			this.attackedPiece = attackedPiece;
		}
	}
	
	
}

------------------------------------------------------------------------------
Code 2
BoardUtils.java

public class BoardUtils {
	public static final boolean[] FIRST_COLUMN = initColumn(0);
	public static final boolean[] SECOND_COLUMN = initColumn(1);
	public static final boolean[] SEVENTH_COLUMN = initColumn(6);	
	public static final boolean[] EIGHTH_COLUMN = initColumn(7);

	public static final int NUM_TILES = 64
	public static final int NUM_TILES_PER_ROW = 64

	private BoardUtils() {
		throw new RuntimeException("You cannot instantiate me");
	}


	private static boolean initColumn(columnNumber) {
		final boolean[] column = new boolean[NUM_TILES];

		do {
			column[columnNumber] = true;
			columnNumber += NUM_TILES_PER_ROW;
		} while(columnNumber < NUM_TILES);
		return column; 

	public static boolean isValidTileCoordinate(final int coordinate) {
		return coordinate >=0 && coordinate < NUM_TILES;
	}
 
	}
	
	
}

-----------------------------------------------------------------------------

package com.chess.engine.pieces.Piece;


public abstract class Tile {


	protected final int tileCoordinate;
	private static final Map<Integer, EmptyTile> EMPTY_TILES_CACHE = createAllPossibleEmptyTiles();

	private static Map<Integer, EmptyTile> createAllPossibleEmptyTiles() {
		final Map<Integer, EmptyTile> emptyTileMap = new HashMap<>();

		for(int i=0; i< NUM_TILES; i++){		//will set NUM_TILES to 64
			emptyTileMap.put(i, new EmptyTile(i));
		}
		return ImmutableMap.copyOf(EmptyTileMap);
	}

	public static Tile createTile(final int tileCoordinate, final Piece piece) {
			return piece != null ? new OccupiedTile(tileCoordinate, piece) :  EMPTY_TILES_CACHE.get(tileCoordinate);
		}					?	//OccupiedTile				  :	//cached Empty Tile



	private Tile(final int tileCoordinate) {
		this.tileCoordinate = tileCoordinate;
	}


	public abstract boolean isTileOccupied();

	public abstract Piece getPiece();

	public static final class EmptyTile extend Tile{
		
		EmptyTile(final int coordinate)
			super(coordinate);
	  	}

		@Override
		public boolean isTileOccupied() {
			return false;
		}
		@Override
		public Piece getPiece() {
			return null;
		}

	}
	public static final class OccupiedTile extends Tile{
		
		private final Piece pieceOnTile;

		private OccupiedTile(int tileCoordinate, final Piece pieceOnTile) {
			super(tileCoordinate);
			this.pieceOnTile = pieceOnTile
		}

		EmptyTile(int coordinate)
			super(coordinate);
	  	}

		@Override
		public boolean isTileOccupied() {
			return true;
		}
		@Override
		public Piece getPiece() {
			return this.pieceOnTile;
		}

	}
}
----------------------------------------------------------------------------------------------------


public class Knight extends Piece {

	private final static int[] CANDIDATE_MOVE_COORDINATES = {-17, -15, -10, -6, 6, 10, 15, 17};

	Knight(final int piecePostiion, final Alliance pieceAlliance ){
		super(piecePosition, pieceAlliance);
	}

	@Override
	public Collection<Move> calculateLegalMoves(final Board board) {
		
		int candidateDestinationCoordinate;
		final List<Move> legalMoves = new ArrayList<>();
	
		for(final int currentCandidate : CANDIDATE_MOVE_COORDINATES) {
			final int candidateDestinationCoordinate = this.piecePosition + currentCandidate;
		
		if(Board.Utils.isValidfileCoordinate(candidateDestinationCoordinate)) {


		if (isFirstColumnExclusion(this.piecePosition, currentCandidateOffset) || 
			isSecondColumnExclusion((this.piecePosition, currentCandidateOffSet)) || 
				isEighthColumnExclusion(this.piecePosition, currentCandidateOffSet)) {
			
				continue;

			}

		  final Tile candidateDestinationTile = board.getTile(candidateDestinationCoordinate);
		   if(!candidateDestinationTile.isTileOCcupied()) {
				legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));
			} else {
				final Piece pieceAtDestination = candidateDestinationTile.getPiece();
				final Alliance pieceAlliance = pieceAtDestination.getPieceAlliance();

				if(this.pieceAlliance != pieceAlliance) {
					legalMoves.add(new AttackMove(board, this, candidateDestinationCoordinate, pieceAtDestination));
			  }
		    }
		  }
		}

		return ImmutableList.copyOf(legalMoves);

	private static boolean isFirstColumnExclusion(final int currentPosition, final int candidatePosition) {
		return	BoardUtils.FIRST_COLUMN[currentPosition] && ((candidateOffSet == -17) || (candidateOffSet == -10) || candidateOffSet == 6 || candidateOffSet = 15); 
		}

	private static boolean isSecondColumnExclusion(final int currentPosition, final int candidateOffset) {
		return BoardUtils.SECOND_COLUMN[currentPosition] && ((candidateOffSet == -10) || (candidateOffSet == 6); 
		}

	private static boolean isSeventhColumnExclusion(final int currentPosition, final int candidateOffset) {
		return BoardUtils.SEVENTH_COLUMN[currentPosition] && ((candidateOffSet == -6) || (candidateOffSet == 10); 
		} 
	private static boolean isEighthColumnExclusion(final int currentPosition, final int candidateOffset) {
		return BoardUtils.EIGHTH_COLUMN[currentPosition] && ((candidateOffSet == -15) || (candidateOffSet == -6); || (candidateOffSet == 10) || (candidateOffSet == 17));
		} 

	}
}


Code 3:
public class Piece {

	protected final int  piecePostion;
	protected final Alliance pieceAlliance;

	Piece(final int PiecePosition, final, Alliance pieceAlliance) {
		this.pieceAlliance = pieceAlliance;
		this.piecePosition = piecePosition;
	}

	public abstract List<Move> calculateLegalMoves(final Board board);	//this could have been unspecified => refactor -> change signature // List<Move> -> Collection<Move>
}														//a set cant have duplicates + unordered
		