a) How to create Movelog

 In Table.java

a.1) create MoveLog()

a.2) Create List<Move> moves

a.3) create constructor


public static class MoveLog {
	private final List<Moev> moves

	MoveLog() {
		this.moves = new ArrayList<>();
	}

	public List<Move> getMoves() {
		return this.moves;
	}
	public void addMove(final Move move) {
		this.moves.add(move);
	}
	public int size() {
		return this.moves.size();
	}
	public void clear() {
	this.moves.clear();
	}
	public Move removeMove(int index) {
		return this.moves.remove(index);
	}
	public boolean removeMove(final Move move) {
	return this.moves.remove(move);
	}	
}  

a.4) Create new class takenPiecesPanel in GUI package

Note: atmost can take 16 pieces from player hence 8x2

a.4.1) add this.northPanel to current JPanel i.e takenPieces panel (use Border.Layout.NORTH))
a.4.2) add this.southPanel to BorderLayout.SOUTH

package com.chess.gui;
import javax.swing.*;
public class TakenPiecesPanel extends JPanel {
	
	private final JPanel northPanel;
	private final JPanel southPanel;	

	private  static final Color PANEL_COLOR =  Color.decode(0xFDFE6)
	private static final Dimension TAKEN_PIECES_DIMENSION = new Dimension(40,80);	
	private static final EtchedBorde r PANEL_BORDER = new EtchedBorder(EtchedBorder.RAISED)
		
	public TakenPiecesPanel() {
		super(new BorderLayout());
		this.setBackground((PANEL_COLOR))
		setBorder(PANEL_BORDER); 
		this.northPanel = new JPanel(new GridLayout(8,2))
		this.southPanel = new JPanel(new GridLayout(8,2))
		this.northPanel.setBackground(PANEL_COLOR);
		this.southPanel.setBackground(PANEL_COLOR);
		this.add(this.northPanel, BorderLayout.NORTH);
		this.add(this.southPanel, BorderLayout.SOUTH);		
		setPreferredSize(TAKEN_PIECES_DIMENSION);
	}

	public void redo(final Table.MoveLog moveLog){
		//move everything from current panel
		this.southPanel.removeAll();
		this.northPanel.removeAll();
		
		final List<Piece> whiteTakenPieces = new ArrayList<>();
		final List<Piece> blackTakenPieces = new ArrayList<>();
		
		for(final Move move: moveLog.getMoves()) {
		//if move is attack move , get taken piece
			if(move.isAttack()) {
				final Piece takenPiece = move.getAttackedPiece();
				if(takenPiece.getPieceAlliance().isWhite()) {
					whiteTakenPieces.add(takenPiece);
					
				} else if(takenPiece.getPieceAlliance().isBlack()) {
					blackTakenPieces.add(takenPiece);
				} else {
					throw new RuntimeException("Should not reach here");
				}
			}	
		}
	} 

	//Ater finding what taken piece was
	//Do sort pieces in north and south panel based on how strong they are

	Collections.sort(whiteTakenPieces, new Comparator<Piece>(){
		@Override
		public int compare(Piece o1, Piece o2) {
			return Ints.compare(o1.getPieceValue(), o2.getPieceValue());
		}
	});
	Collections.sort(blackTakenPieces, new Comparator<Piece>(){
		@Override
		public int compare(Piece o1, Piece o2) {
			return Ints.compare(o1.getPieceValue(), o2.getPieceValue());
		}
	});
	
	//draw taken pieces
	for(final Piece takenPiece : whiteTakenPieces) {
		try{
		  final BUfferedImage image = ImageIO.read(new File("art/pieces/plain"
			 + takenPiece.getPieceAlliance().toString().substring(0,1) + "" + takenPiece.toString()))	
		  final ImageIcon icon =  new ImageIconImage);
		  final JLabel imageLabel = new JLabel();
		  this.southPanel.add(imageLabel);
		}catch(final IOException e) {
		  e.printStackTrace();
		}
	}
		for(final Piece takenPiece : blackTakenPieces) {
		try{
		  final BUfferedImage image = ImageIO.read(new File("art/pieces/plain"
			 + takenPiece.getPieceAlliance().toString().substring(0,1) + "" + takenPiece.toString()))	
		  final ImageIcon icon =  new ImageIconImage);
		  final JLabel imageLabel = new JLabel();
		  this.southPanel.add(imageLabel);
		}catch(final IOException e) {
		  e.printStackTrace();
		}
	}
	validate();
   }
}


We will add this takenPieces class to table,
similar approach to gamehistory panel :  JPanel class