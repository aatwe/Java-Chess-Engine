a) Objective: Calculate legal moves for bishop


b) How to calculate  legal moves for bishop?
	 similar to knight

	b.1) where are bishop legal moves on 
	
					0,  1 ,2, 3, 4, 5, 6, 7
					 8,  9,10,11,12,13,14,15
					16, 17,18,19,20,21,22,23
					24, 25,26,27,28,29,30,31
					32, 33,34,35,36,37,38,39
					40, 41,42,43,44,45,46,47
					48.....55
					56.....64	
		if bishop at for ex d4 (tile 35)

		What offsets? -7, -9, +7, +9 from current position
			//these will be our vectors
		//All 4 vector represent directions

		Q) Are there exceptions to this rule?



c) Now we know 4 directions
	How to find which moves accessible?
	have to take check if there is piece in each direction,
		if no piece, loop will show next tile as accesible


 Loop through each coordinates
		What if a piece located? no need to worry if friendly or enemy,
			the path is in accessible	
 


-----------------------------------------------------------------

a) create class Bishop

b) Create constructors

c) Override and Create calculateLegalMoves() method for Bishop
	What will this method return?
		Collection<Move>


	What this method contains?
		c.1) ArrayList of legalMoves
			Create ArrayList of legalMoves

		c.2) loop over vector coordinates 
				while legal move
					add offset to this piece position = candidateDestinationCoordinate
						what after if is valid Tile
							check if empty -> major move
							if not empty   -> attackMove
	
	
	Q) What edge cases? 
		ex bishop on a4 -> +7 fail, -9 fail

					
d) Create vector cooridnates to find legal moves
	where store vector cooridnates? CANDIDATE_MOVE_VECTOR_COORDINATES array of type int[]


e) return ImmutableList.copyOf(legalMoves);

f) edge cases
	f.1) 
	define them in 2 methods:
	isFirstColumnExclusion()	//What arguments? currentPosition and candidateOffset

	isEightColumnExclusion()

		//both methods return boolean Array, what will we do with this boolean array?
			
	f.2) 
	Add these edge cases to while() inside for()
		isFirstColumnExclusion() ||  isEightColumnExclusion()
			if any match -> break


Code DONE: We will develop unit tests once we have critical mass on code 



h) Clean Ups for Bishop

	
_______________________________________________________________
Code:

public class Bishop extends Piece {

	private final static int[] CANDIDATE_MOVE_VECTOR_COORDINATES = {-9, -7, 7 , 9};

	Bishop(int piecePosition, Alliance, pieceAlliance) {
		super(piecePosition, pieceAlliance);
	}

	@Override
	public Collection<Move> calculateLegalMoves(final Board board) {
		final List<Move> legalMoves = new ArrayList<>();

		for(final int candidateCoordinateOfset: CANDIDATE_MOVE_VECTOR_COORDINATES) {
			int candidateDestinationCoordinate = this.piecePosition;
		

			while(BoardUtils.isValidTileCoordinate(candidateDestinationCoordinate)) {
				candidateDestinationCoordinate += candidateCoordinateOffset;
				
				if(isFirstColumnExclusion(candidateDestinationCoordinate, candidateCoordinateOffset) ||
					isEigthColumnExclusion(candidateDestinationCoordinate, candidateCoordinateOffset)) {
					break;
				}         


				if(Board.Utils.isValidTileCoordinate(candidateDestinationCoordinate)){
					legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));
				} else {
					final Piece pieceAtDestination = candidateDestinationTile.getPiece();
					final Alliance pieceAlliance = pieceAtDestination.getPieceAlliance();

					if(this.pieceAlliance != pieceAlliance) {
							legalMoves.add(new AttackMove(board, this, candidateDestinationCoordinate, pieceAtDestination));
					}
					break; 
				}
				
			}

		}

	}

	return ImmutableList.copyOf(legalMoves);
	}

	private static boolean isFirstColumnExclusion(final int currentPosiion, final int candidateOffset) {
		return BoardUtils.FIRST_COLUMN(currentPosition) && (candidateOffset = -9 || candidateOffset = +7);
	}
		
	private static boolean isEightColumnExclusion(final int currentPosiion, final int candidateOffset) {
		return BoardUtils.EIGHTH_COLUMN(currentPosition) && (candidateOffset = -7 || candidateOffset = +9);
	}

Q) What edge cases? 
		ex bishop on a4 -> +7 fail, -9 fail
}
___________________________________________________________________________________


Other codes:

public abstract class Move{
	
	final Board board;	
	final Piece movedPiece;
	final int destinationCoordinate;

	private Move(final Board board, final Piece movedPiece, final int destinationCoordinate) {
		this.board = board;	
		this.movedPiece = movedPiece;	
		this.destinationCoordiante = destinationCoordinate;
	}

	public static final class MajorMove extends Move {

		public MajorMove(finalBoard board,final Piece movedPiece,int destinationCoordinate){
			super(board, movedPiece, destinationCoordinate);		
	}

	public static final class AttackMove extends Move {
		
		final Piece attackedPiece;

		public AttackMove(finalBoard board,
				Piece movedPiece,
				final int destinationCoordinate, final Piece attackedPiece){
			super(board, movedPiece, destinationCoordinate);
			this.attackedPiece = attackedPiece;
		}
	}
	
	
}

------------------------------------------------------------------------------
Code 2
BoardUtils.java

public class BoardUtils {
	public static final boolean[] FIRST_COLUMN = initColumn(0);
	public static final boolean[] SECOND_COLUMN = initColumn(1);
	public static final boolean[] SEVENTH_COLUMN = initColumn(6);	
	public static final boolean[] EIGHTH_COLUMN = initColumn(7);

	public static final int NUM_TILES = 64
	public static final int NUM_TILES_PER_ROW = 64

	private BoardUtils() {
		throw new RuntimeException("You cannot instantiate me");
	}


	private static boolean initColumn(columnNumber) {
		final boolean[] column = new boolean[NUM_TILES];

		do {
			column[columnNumber] = true;
			columnNumber += NUM_TILES_PER_ROW;
		} while(columnNumber < NUM_TILES);
		return column; 

	public static boolean isValidTileCoordinate(final int coordinate) {
		return coordinate >=0 && coordinate < NUM_TILES;
	}
 
	}
	
	
}

-----------------------------------------------------------------------------

package com.chess.engine.pieces.Piece;


public abstract class Tile {


	protected final int tileCoordinate;
	private static final Map<Integer, EmptyTile> EMPTY_TILES_CACHE = createAllPossibleEmptyTiles();

	private static Map<Integer, EmptyTile> createAllPossibleEmptyTiles() {
		final Map<Integer, EmptyTile> emptyTileMap = new HashMap<>();

		for(int i=0; i< NUM_TILES; i++){		//will set NUM_TILES to 64
			emptyTileMap.put(i, new EmptyTile(i));
		}
		return ImmutableMap.copyOf(EmptyTileMap);
	}

	public static Tile createTile(final int tileCoordinate, final Piece piece) {
			return piece != null ? new OccupiedTile(tileCoordinate, piece) :  EMPTY_TILES_CACHE.get(tileCoordinate);
		}					?	//OccupiedTile				  :	//cached Empty Tile



	private Tile(final int tileCoordinate) {
		this.tileCoordinate = tileCoordinate;
	}


	public abstract boolean isTileOccupied();

	public abstract Piece getPiece();

	public static final class EmptyTile extend Tile{
		
		EmptyTile(final int coordinate)
			super(coordinate);
	  	}

		@Override
		public boolean isTileOccupied() {
			return false;
		}
		@Override
		public Piece getPiece() {
			return null;
		}

	}
	public static final class OccupiedTile extends Tile{
		
		private final Piece pieceOnTile;

		private OccupiedTile(int tileCoordinate, final Piece pieceOnTile) {
			super(tileCoordinate);
			this.pieceOnTile = pieceOnTile
		}

		EmptyTile(int coordinate)
			super(coordinate);
	  	}

		@Override
		public boolean isTileOccupied() {
			return true;
		}
		@Override
		public Piece getPiece() {
			return this.pieceOnTile;
		}

	}
}
----------------------------------------------------------------------------------------------------


public class Knight extends Piece {

	private final static int[] CANDIDATE_MOVE_COORDINATES = {-17, -15, -10, -6, 6, 10, 15, 17};

	Knight(final int piecePostiion, final Alliance pieceAlliance ){
		super(piecePosition, pieceAlliance);
	}

	@Override
	public Collection<Move> calculateLegalMoves(final Board board) {
		
		int candidateDestinationCoordinate;
		final List<Move> legalMoves = new ArrayList<>();
	
		for(final int currentCandidate : CANDIDATE_MOVE_COORDINATES) {
			final int candidateDestinationCoordinate = this.piecePosition + currentCandidate;
		
		if(Board.Utils.isValidfileCoordinate(candidateDestinationCoordinate)) {


		if (isFirstColumnExclusion(this.piecePosition, currentCandidateOffset) || 
			isSecondColumnExclusion((this.piecePosition, currentCandidateOffSet)) || 
				isEighthColumnExclusion(this.piecePosition, currentCandidateOffSet)) {
			
				continue;

			}

		  final Tile candidateDestinationTile = board.getTile(candidateDestinationCoordinate);
		   if(!candidateDestinationTile.isTileOCcupied()) {
				legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));
			} else {
				final Piece pieceAtDestination = candidateDestinationTile.getPiece();
				final Alliance pieceAlliance = pieceAtDestination.getPieceAlliance();

				if(this.pieceAlliance != pieceAlliance) {
					legalMoves.add(new AttackMove(board, this, candidateDestinationCoordinate, pieceAtDestination));
			  }
		    }
		  }
		}

		return ImmutableList.copyOf(legalMoves);

	private static boolean isFirstColumnExclusion(final int currentPosition, final int candidatePosition) {
		return	BoardUtils.FIRST_COLUMN[currentPosition] && ((candidateOffSet == -17) || (candidateOffSet == -10) || candidateOffSet == 6 || candidateOffSet = 15); 
		}

	private static boolean isSecondColumnExclusion(final int currentPosition, final int candidateOffset) {
		return BoardUtils.SECOND_COLUMN[currentPosition] && ((candidateOffSet == -10) || (candidateOffSet == 6); 
		}

	private static boolean isSeventhColumnExclusion(final int currentPosition, final int candidateOffset) {
		return BoardUtils.SEVENTH_COLUMN[currentPosition] && ((candidateOffSet == -6) || (candidateOffSet == 10); 
		} 
	private static boolean isEighthColumnExclusion(final int currentPosition, final int candidateOffset) {
		return BoardUtils.EIGHTH_COLUMN[currentPosition] && ((candidateOffSet == -15) || (candidateOffSet == -6); || (candidateOffSet == 10) || (candidateOffSet == 17));
		} 

	}
}


Code 3:
public class Piece {

	protected final int  piecePostion;
	protected final Alliance pieceAlliance;

	Piece(final int PiecePosition, final, Alliance pieceAlliance) {
		this.pieceAlliance = pieceAlliance;
		this.piecePosition = piecePosition;
	}

	public abstract List<Move> calculateLegalMoves(final Board board);	//this could have been unspecified => refactor -> change signature // List<Move> -> Collection<Move>
}														//a set cant have duplicates + unordered
		
