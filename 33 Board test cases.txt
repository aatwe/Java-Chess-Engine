a) continue to search in game tree only if game has not ended
for ex if depth of 6, and reach ccheckmate before we get to depth of 0


stop and evaluate board


a.1) below method checks if current player in cehckmate or stale mate
stop searching further down in that case
just evaluate the board

public int max(final Board board,
final int depth) {
if(depth == 8 || isEndGameScenario(board)) {
return this.boardEvaluator.evaluate(board, depth);
}
int highestSeenValue = Integer.MIN_VALUE;
for(final Move move : board.currentPlayer().getLegalMoves()) {
final MoveTransition moveTransition = board.currentPlayer().makeMove(move);
if(moveTransition.getMoveStatus().isDone()) {
final int currentValue = min(moveTransition.getTransitionBoard(), depth - 1);
if(currentValue >= highestSeenValue) {
highestSeenValue = currentValue;
}
}
}
return highestSeenValue;
}

a.2) remove depth from MoveStrategy interface
		Move execute(Board board);

//only pass board
//better to have generic interface and only take board into account

search depth is specific to a type of  move strategy minmax

//refactor instead into 

public class MiniMax implements MoveStrategy {
A private final BoardEvaluator boardEvaluator;
; private final int searchDebth;
public MiniMax(final int searchDepth) {
this.boardEvaluator = new StandardBoardEvaluator();
this.searchDepth = searchDepth;
}
@Override
public String toString() {
return "MiniMax";
}







a.3) add testFoolsMate() in TestBoard class

what is this? test case for AI

What is Fool's mate? early mate in chess
we will use black to find this move

for ex 2 pawn front and queen check mate



How to write test case?

a.3.1) construct the standard board
a.3.2) use movefactory to open with move from f2 to f3
a.3.3) play black e7 to e5
a.3.4) play white g2 to g4

a.3.5) instantiate move strategy MiniMax with depth 4

a.3.6) execute the ai move on board

a.3.7) we know best move is d8 to h4, store in bestMove

a.3.8) check if both equal
	assertEquals(aiMove, bestMove);

RUN:  
	test passed: green




.makeMove(Move.MoveFactory.createMove(board, BoardUtils.getCoordinateAtPosition("f2"),BoardUtils.getCoordinateAtPosition("f3")));

assertTrue(t1.getMoveStatus().isDone());
final MoveTransition t2 = t1.getTransitionBoard()
.currentPlayer()
.makeMove(Move.MoveFactory.createMove(t1.getTransitionBoard(), BoardUtils.getCoordinateAtPosition("e7"),
BoardUtils.getCoordinateAtPosition("e5")));
assertTrue(t2.getMoveStatus().isOone());
final MoveTransition t3 = t2.getTransitionBoard()
.currentPlayer()
.makeMove(Move.MoveFactory.createMove(t2.getTransitionBoard(), BoardUtils.getCoordinateAtPosition("92"),
BoardUtils.getCoordinateAtPosition("94")));
assertTrue(t3.getMoveStatus().isOone()); I
final MoveStrategy strategy = new MiniMax(4);
final Move aiMove = strategy.execute(t3.getTransitionBoard());
final Move bestMove = Move.MoveFactory.createMove(t3.getTransitionBoard(), BoardUtils.getCoordinateAtPosition("d8"),
BoardUtils.getCoordinateAtPosition("h4"));
assertEquals(aiMove, bestMove);


------------------------------------------------------------------------------
@Test
public void testFoolsMate() {
final Board board = Board.createStandardBoard();
final MoveTransition t1 = board.currentPlayer()
.makeMove(Move.MoveFactory.createMove(board, BoardUtils.getCoordinateAtPosition("f2"),
BoardUtils.getCoordinateAtPosition("f3")));
assertTrue(t1.getMoveStatus().isDone());
final MoveTransition t2 = t1.getTransitionBoard()
.currentPlayer()
.makeMove(Move.MoveFactory.createMove(t1.getTransitionBoard(), BoardUtils.getCoordinateAtPosition("e7"),
BoardUtils.getCoordinateAtPosition("e5")));
assertTrue(t2.getMoveStatus().isDone()):
final MoveTransition t3 = t2.getTransitionBoard()
.currentPlayer()
.makeMove(Move.MoveFactory.createMove(t2.getTransitionBoard(), BoardUtils.getCoordinateAtPosition("92"),
BoardUtils.getCoordinateAtPosition("94")));
assertTrue(t3.getMoveStatus().isOone());
I
final MoveStrategy strategy = new MiniMax(4);
final Move aiMove = strategy.execute(t3.getTransitionBoard());
final Move bestMove = Move.MoveFactory.createMove(t3.getTransitionBoard(), BoardUtils.getCoordinateAtPosition("d8").
BoardUtils.getCoordinateAtPosition("h4")):
assertEquals(aiMove, bestMove);
}