
Changes:

1) What done? non attacking pawn move + pawn jump

2) what next? pawn attack, pawn promotion, en pessant


How to code attack move for pawn?

1) pawn attacks on both diagonals

Q) what happens in move class?
	2 subclasses : MajorMove and AttackMove subclass




2) add another else if candidate offset  = 7

3) add another else if candidate offset  = 9

4) private final static int[] CANDIDATE_MOVE_COORDINATE = {8, 16 ,7 ,9};

5) What is edge case? 
	if white and on 1st col -> cant attack left
	if white and on last col -> cant attack on right
	if black and on 1st col -> cant attack left

 
	if black and on 1st col -> cant attack right

6) have access to PieceAlliance

7)  (BoardUtils.EIGHTH_COLUMN(this.piecePosition)&& this.PieceAlliance().isWhite()) || 		//if on 8th col + being white --> rule of 7 doesnt work --> 8,9 works
    (BoardUtils.FIRST_COLUMN(this.piecePosition) && this.PieceAlliance().isBlack()))) {		//if on 8th col + being black --> rule of 7 doesnt work --> 8,9 works
	

8) Add extra checks:
	a) Check if candidateDestination coordinate is occupied
	b) what piece on tile? using board.getTile(candidateDestinationCoordinate).getPiece(); 
	c) Check alliance of current piece and candidate Piece, if not equal
	d) add majorMove to legalMoves	legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));


9) What exception case? candidateOffset =  9
	a) if candidateOffset= 9 and our piece = white on first col --> rule breaks
	b) if candidateOffset= 9 and our piece = black on eighth col --> rule breaks


	Rest code same

------------------------------------------------------------------------------------------------------------------
We are reaching critical mass : can write unit tests
------------------------------------------------------------------------------------------------------------------


import com.chess.engine.Alliance;
import com.chess.engine.board.Board;
import com.chess.engine.board.BoardUtils;
import com.chess.engine.board.Move;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static com.chess.engine.board.Move;



class Pawn extends Piece {
	
	private final static int[] CANDIDATE_MOVE_COORDINATE = {8, 16 ,7 ,9};

	Pawn(final int piecePosition, final Alliance pieceAlliance) {
		super(piecePosition, pieceAlliance);
	}


	@Override
	public Collection<Move> calculateLegalMoves(final Board board) {

		final List<Move> legalMoves = new ArrayList<>(); 
		
		for(final int currentCandidateOffset: CANDIDATE_MOVE_COORDINATE){
			
		final int candidateDestinationCoordinate = this.piecePosition + (this.PieceAlliance().getDirection() + currentCandidateOffset);
			if(!BoardUtils.isValidTileCoordinate(candidateDestinationCoordinate)) {
				coninue;
			}	

			if(currentCandidateOffset == 8 && board.getTile(candidateDsetinationCoordinate).isTileOccupied()) {
				//deal with promotions here later

				legalMoves.add(new Move.MajorMove(board, this, candidateDestinationCoordinate))
			} else if (currentCandidateOffset == 16 && this.isFirstMove() 
					`	&& (BoardUtils.SECOND_ROW(this.piecePosition) && this.getPieceAlliance().isBlack() 
							|| (BoardUtils.SEVENTH_ROW(this.piecePosition) && this.getPieceAlliance().isWhite())) {
			
				final int behindCandidateDestinationCoordinate = this.piecePosition + (this.pieceAlliance.getDirection() *8) {
				if(!board.getTile(behindCandidateDestinationCoordinate).isTileOccupied() && 
					!board.getTile(candidateDestinationCoordinate).isTileOccupied() &&
						!board.getTile(candidateDestinationCoordinate).isTileOccupied()) {
							legalMoves.add(new Move.MajorMove(board, this, candidateDestinationCoordinate));
					}
				else if(currentCandidateOffset == 7) {
					(BoardUtils.EIGHTH_COLUMN(this.piecePosition)&& this.PieceAlliance().isWhite()) || 
					(BoardUtils.FIRST_COLUMN(this.piecePosition) && this.PieceAlliance().isBlack()))) {
	
					if(board.getTile(candidateDestinationCoordinate).isTileOccupied()){	
						final Piece pieceOnCandidate = board.getTile(candidateDestinationCoordinate).getPiece(); 
						if(this.pieceAlliance != pieceOnCandidate.getPieceAlliance()) {
							//more todo here
							legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));
						}
				}
				} else if(currentCandidateOffset == 9 && ) {
					(BoardUtils.FIRST_COLUMN(this.piecePosition)&& this.PieceAlliance().isWhite()) || 
					(BoardUtils.EIGHTH_COLUMN(this.piecePosition) && this.PieceAlliance().isBlack()))) {
									if(board.getTile(candidateDestinationCoordinate).isTileOccupied()){	
						final Piece pieceOnCandidate = board.getTile(candidateDestinationCoordinate).getPiece(); 
						if(this.pieceAlliance != pieceOnCandidate.getPieceAlliance()) {
							//more todo here
							legalMoves.add(new MajorMove(board,this,candidateDestinationCoordinate));
						}
					}
	
				}
	
			}
		return ImmutableList.copyOf(legalMoves);
	}

}